import { useEffect } from "react";
import { useForm } from "react-hook-form";
import { User, X, Mail, CreditCard, Shield, UserCheck } from 'lucide-react';
import { useRolesHook } from "../../hooks/useRolesHook";
import { useAllowedUsersHook } from "../../hooks/useAllowedUsersHook";
import { LocalLoading } from "../../../staff/components/users/LocalLoading";

export const UserFormModal = ({ initialData = {}, onClose }) => {
  const isEditMode = initialData.userID !== null;
  const { loading: loadingRoles, getRoles, roles } = useRolesHook();
  const { loading: loadingUserHook, giveOrUpdateAcces } = useAllowedUsersHook();
  const { register, handleSubmit, watch, setValue, formState: { errors } } = useForm({
    defaultValues: {
      ...initialData
    }
  });

  const watchedEmail = watch('email');
  const watchedUsername = watch('username');
  const onSubmited = handleSubmit(async userInfo => await giveOrUpdateAcces(isEditMode, userInfo, onClose));

  useEffect(() => { 
    getRoles();
  }, []);

  useEffect(() => {
    if (watchedUsername && !isEditMode) {
      const cleanUsername = watchedUsername.toLowerCase().replace(/\s+/g, '');
      const suggestedEmail = `${cleanUsername}@newstetic.com`;
      
      const isAutoGeneratedEmail = watchedEmail && watchedEmail.endsWith('@newstetic.com') &&  watchedEmail.split('@')[0] !== cleanUsername;
      
      if (!watchedEmail || isAutoGeneratedEmail) setValue('email', suggestedEmail);
      
    }
  }, [watchedUsername, setValue, isEditMode]);

  if(loadingRoles || loadingUserHook) return <LocalLoading />

  return (
    <div className="flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-2xl shadow-2xl w-full mx-auto transform transition-all">
        {/* Header con gradiente */}
        <div className="bg-gradient-to-r from-blue-600 to-purple-600 rounded-t-2xl p-6 text-white">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-white/20 backdrop-blur-sm rounded-xl flex items-center justify-center">
                <User className="w-6 h-6" />
              </div>
              <div>
                <h2 className="text-xl font-bold">
                  {isEditMode ? 'Editar Usuario' : 'Nuevo Usuario'}
                </h2>
                <p className="text-blue-100 text-sm">
                  {isEditMode ? 'Actualiza la informaci√≥n del usuario' : 'Completa los datos del nuevo usuario'}
                </p>
              </div>
            </div>
            <button 
              onClick={onClose}
              className="text-white/70 hover:text-white hover:bg-white/10 rounded-lg p-2 transition-all duration-200"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
        </div>

        {/* Form con mejor espaciado */}
        <form onSubmit={onSubmited} className="p-6 space-y-5">
          {/* Username con icono mejorado */}
          <div className="space-y-2">
            <label className="flex items-center gap-2 text-sm font-semibold text-gray-700">
              <User className="w-4 h-4 text-blue-500" />
              Nombre de Usuario
              <span className="text-red-500">*</span>
            </label>
            <div className="relative">
              <input
                {...register('username', {
                  required: 'El nombre de usuario es requerido',
                  minLength: {
                    value: 3,
                    message: 'El nombre debe tener al menos 3 caracteres'
                  }
                })}
                type="text"
                className={`w-full pl-10 pr-4 py-3 border-2 rounded-xl focus:ring-2 focus:ring-blue-500/20 focus:border-blue-500 outline-none transition-all duration-200 bg-gray-50 focus:bg-white ${
                  errors.username ? 'border-red-300 bg-red-50' : 'border-gray-200 hover:border-gray-300'
                }`}
                placeholder="Ingresa el nombre de usuario"
              />
              <User className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
            </div>
            {errors.username && (
              <p className="text-red-500 text-xs flex items-center gap-1 mt-1">
                <span className="w-3 h-3 rounded-full bg-red-500 text-white text-xs flex items-center justify-center">!</span>
                {errors.username.message}
              </p>
            )}
          </div>

          {/* Document Number */}
          <div className="space-y-2">
            <label className="flex items-center gap-2 text-sm font-semibold text-gray-700">
              <CreditCard className="w-4 h-4 text-green-500" />
              N√∫mero de Documento
              <span className="text-red-500">*</span>
            </label>
            <div className="relative">
              <input
                {...register('documentNumber', {
                  required: 'El n√∫mero de documento es requerido',
                  pattern: {
                    value: /^\d+$/,
                    message: 'Solo se permiten n√∫meros'
                  }
                })}
                type="text"
                className={`w-full pl-10 pr-4 py-3 border-2 rounded-xl focus:ring-2 focus:ring-green-500/20 focus:border-green-500 outline-none transition-all duration-200 bg-gray-50 focus:bg-white ${
                  errors.documentNumber ? 'border-red-300 bg-red-50' : 'border-gray-200 hover:border-gray-300'
                }`}
                placeholder="Ingresa el n√∫mero de documento"
              />
              <CreditCard className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
            </div>
            {errors.documentNumber && (
              <p className="text-red-500 text-xs flex items-center gap-1 mt-1">
                <span className="w-3 h-3 rounded-full bg-red-500 text-white text-xs flex items-center justify-center">!</span>
                {errors.documentNumber.message}
              </p>
            )}
          </div>

          {/* Email con sugerencia autom√°tica */}
          <div className="space-y-2">
            <label className="flex items-center gap-2 text-sm font-semibold text-gray-700">
              <Mail className="w-4 h-4 text-purple-500" />
              Correo Electr√≥nico
              <span className="text-red-500">*</span>
            </label>
            <div className="relative">
              <input
                {...register('email', {
                  required: 'El correo electr√≥nico es requerido',
                  pattern: {
                    value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
                    message: 'Ingresa un correo electr√≥nico v√°lido'
                  }
                })}
                type="email"
                className={`w-full pl-10 pr-12 py-3 border-2 rounded-xl focus:ring-2 focus:ring-purple-500/20 focus:border-purple-500 outline-none transition-all duration-200 bg-gray-50 focus:bg-white ${
                  errors.email ? 'border-red-300 bg-red-50' : 'border-gray-200 hover:border-gray-300'
                }`}
                placeholder="ejemplo@newstetic.com"
              />
              <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
              {watchedEmail && (
                <button
                  type="button"
                  onClick={() => setValue('email', '')}
                  className="absolute right-3 top-1/2 transform -translate-y-1/2 w-6 h-6 rounded-full bg-gray-200 hover:bg-red-100 text-gray-500 hover:text-red-500 flex items-center justify-center transition-all duration-200 hover:scale-110"
                  title="Limpiar campo de email"
                >
                  <X className="w-3 h-3" />
                </button>
              )}
            </div>
            {!isEditMode && watchedUsername && (
              <p className="text-xs text-blue-600 bg-blue-50 p-2 rounded-lg border border-blue-200">
                üí° Se generar√° autom√°ticamente: <span className="font-mono font-semibold">{watchedUsername.toLowerCase().replace(/\s+/g, '')}@newstetic.com</span>
              </p>
            )}
            {errors.email && (
              <p className="text-red-500 text-xs flex items-center gap-1 mt-1">
                <span className="w-3 h-3 rounded-full bg-red-500 text-white text-xs flex items-center justify-center">!</span>
                {errors.email.message}
              </p>
            )}
          </div>

          {/* State - solo en modo edici√≥n */}
          {isEditMode && (
            <div className="space-y-2">
              <label className="flex items-center gap-2 text-sm font-semibold text-gray-700">
                <UserCheck className="w-4 h-4 text-orange-500" />
                Estado
                <span className="text-red-500">*</span>
              </label>
              <select
                {...register('state', {
                  required: 'El estado es requerido'
                })}
                className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:ring-2 focus:ring-orange-500/20 focus:border-orange-500 outline-none transition-all duration-200 bg-gray-50 focus:bg-white hover:border-gray-300"
              >
                <option value="Activo">‚úÖ Activo</option>
                <option value="Inactivo">‚ùå Inactivo</option>
              </select>
              {errors.state && (
                <p className="text-red-500 text-xs flex items-center gap-1 mt-1">
                  <span className="w-3 h-3 rounded-full bg-red-500 text-white text-xs flex items-center justify-center">!</span>
                  {errors.state.message}
                </p>
              )}
            </div>
          )}

          {/* Role ID */}
          <div className="space-y-2">
            <label className="flex items-center gap-2 text-sm font-semibold text-gray-700">
              <Shield className="w-4 h-4 text-indigo-500" />
              Rol del Usuario
              <span className="text-red-500">*</span>
            </label>
            <select 
              {...register('roleID', {
                required: 'El rol es requerido'
              })} 
              className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:ring-2 focus:ring-indigo-500/20 focus:border-indigo-500 outline-none transition-all duration-200 bg-gray-50 focus:bg-white hover:border-gray-300"
            >
              <option value="" disabled>Selecciona un rol...</option>
              {roles.map(role => (
                <option value={role.rol_id} key={role.rol_id}> 
                  üõ°Ô∏è {role.nombre} 
                </option>
              ))}
            </select>
            {errors.roleID && (
              <p className="text-red-500 text-xs flex items-center gap-1 mt-1">
                <span className="w-3 h-3 rounded-full bg-red-500 text-white text-xs flex items-center justify-center">!</span>
                {errors.roleID.message}
              </p>
            )}
          </div>

          {/* Buttons con mejor dise√±o */}
          <div className="flex gap-3 pt-6 border-t border-gray-100">
            <button
              type="button"
              onClick={onClose}
              className="flex-1 px-6 py-3 text-gray-600 font-medium border-2 border-gray-200 rounded-xl hover:bg-gray-50 hover:border-gray-300 transition-all duration-200 flex items-center justify-center gap-2"
            >
              <X className="w-4 h-4" />
              Cancelar
            </button>
            <button
              type="submit"
              className="flex-1 px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-500 text-white font-semibold rounded-xl hover:from-blue-600 hover:to-purple-600 transition-all duration-200 flex items-center justify-center gap-2 shadow-lg hover:shadow-xl"
            >
              <User className="w-4 h-4" />
              {isEditMode ? 'Actualizar' : 'Crear Usuario'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}